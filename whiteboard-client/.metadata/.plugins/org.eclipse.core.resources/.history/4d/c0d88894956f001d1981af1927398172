package application;

import java.util.ArrayList;
import java.util.List;

public class Synchroniser {
	
	public UpdateGroup currentUpdate;
	private List<UpdateGroup> state;
	private List<UpdateGroup> stateReceived;
	
	private Comms comms;
	
	public Synchroniser(Comms comms) {
		this.comms = comms;
		currentUpdate = new UpdateGroup();
		state = new ArrayList<UpdateGroup>();
	}
	
	public void start() {
		Thread stateUploader = new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					if(currentUpdate.empty) {
						try {
							Thread.sleep(10);
							continue;
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					
					//send current state change
					comms.messageToSend = currentUpdate.toString();
					state.add(currentUpdate);
					long groupID = currentUpdate.id;
					currentUpdate = new UpdateGroup();
					System.out.println("awaiting confirmation for:" + groupID);
					
					//wait for confirmation
					boolean awaitingAck = true;
					while(awaitingAck) {
						comms.messagesLock.lock();
						for(int i = 0; i < comms.messagesReceived.size(); i++) {
							String message = comms.messagesReceived.get(i);
							int idloc = message.indexOf("ID:");
							if(message.length() >= 4 && message.substring(0, 4).equals("ACK;") && idloc != -1) {
								String idfound = message.substring(idloc + 3, message.indexOf(";", idloc));
								if(idfound.equals(Long.toString(groupID))) {
									awaitingAck = false;
									System.out.println("confirmation received");
									break;
								}
							}
						}
						comms.messagesLock.unlock();
					}
					//todo - timeout if confirmation NOT received
				}
			}
		});
		stateUploader.start();
		
		Thread stateReceiver = new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					//receive state from server
					if(comms.messagesReceived.size() == 0) {
						try {
							Thread.sleep(10);
							continue;
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					comms.messagesLock.lock();
					for(int i = 0; i < comms.messagesReceived.size(); i++) {
						//gather state updates
						String message = comms.messagesReceived.get(i);
						if(message.length() >= 7 && message.substring(0, 8).equals("UPDATE;")) {
							int idloc = message.indexOf("ID:") + 3;
							int idend = message.indexOf(";", idloc);
							String id = message.substring(idloc, idend);
							UpdateGroup newUpdate = new UpdateGroup(Long.parseLong(id));
							for(String str : message.substring(idend).split(";")) {
								newUpdate.append(str);
							}
							stateReceived.add(newUpdate);
						}
					}
					comms.messagesLock.unlock();
					System.out.println("received new state:");
					for(int i = 0; i<stateReceived.size();i++) {
						System.out.println("state: " + stateReceived.get(i));
					}
				}
			}
		});
		stateReceiver.start();
		
	}

}
