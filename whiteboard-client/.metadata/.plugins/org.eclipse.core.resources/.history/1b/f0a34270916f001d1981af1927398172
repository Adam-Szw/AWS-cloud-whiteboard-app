package application;

import java.util.ArrayList;
import java.util.List;

public class Synchroniser {
	
	public UpdateGroup currentUpdate;
	private List<UpdateGroup> state;
	private List<UpdateGroup> stateReceived;
	
	private Comms comms;
	
	public Synchroniser(Comms comms) {
		this.comms = comms;
		currentUpdate = new UpdateGroup();
		state = new ArrayList<UpdateGroup>();
	}
	
	public void start() {
		Thread stateUploader = new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					if(currentUpdate.empty) {
						try {
							Thread.sleep(10);
							continue;
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					
					//send current state change
					comms.messageToSend = currentUpdate.toString();
					state.add(currentUpdate);
					long groupID = currentUpdate.id;
					System.out.println("saving ID: " + groupID);
					currentUpdate = new UpdateGroup();
					System.out.println("awaiting confirmation for:" + groupID);
					
					//wait for confirmation
					boolean awaitingAck = true;
					while(awaitingAck) {
						comms.messagesLock.lock();
						for(int i = 0; i < comms.messagesReceived.size(); i++) {
							String message = comms.messagesReceived.get(i);
							System.out.println("msgA: " + message);
							int idloc = message.indexOf("ID:");
							System.out.println("idloc: " + idloc);
							if(message.length() >= 3 && message.substring(0, 4).equals("ACK;") && idloc != -1) {
								System.out.println("msg: " + message);
								String id = message.substring(idloc + 4, message.indexOf(";", idloc));
								System.out.println("id: " + id);
								if(id.equals(Long.toString(groupID))) {
									awaitingAck = false;
									System.out.println("confirmation received");
									break;
								}
							}
						}
						comms.messagesLock.unlock();
					}
					/*
					
					stateUpdate.clear();
					//todo - check if received and revert changes before deleting
					
					//receive state from server
					while(comms.messagesReceived.size() > 0) {
						String msg = comms.messagesReceived.get(0);
						for(String str : msg.split(";")) {
							GraphicsImplementer.ShapeType shapeReceived = GraphicsImplementer.decode(str);
							if(shapeReceived == GraphicsImplementer.ShapeType.line) {
								stateReceived.append(new Line(str));
							}
						}
						comms.messagesReceived.remove(0);
					}
					
					//check if state needs to be updated
					if(!stateReceived.empty) {
						
						
						
						stateReceived.clear();
					}
*/
				}
			}
		});
		stateUploader.start();
	}

}
